Program([
	FuncDecl(inc, VoidType, [OutParam(n, IntegerType), InheritParam(delta, IntegerType), InheritOutParam(hallo, AutoType)], add, BlockStmt([IfStmt(UnExpr(<class 'str'>, BooleanLit(True)), ReturnStmt(BooleanLit(True)), ReturnStmt(BooleanLit(False))), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(10)), BinExpr(+, Id(i), IntegerLit(1)), IfStmt(BinExpr(>, Id(i), IntegerLit(0)), ContinueStmt(), BreakStmt())), WhileStmt(BooleanLit(True), ReturnStmt(BinExpr(==, ArrayCell(a, [IntegerLit(1), ArrayCell(a, [IntegerLit(1), IntegerLit(2)])]), ArrayCell(b, [IntegerLit(6), IntegerLit(9)])))), DoWhileStmt(BinExpr(!=, Id(a), Id(b)), BlockStmt([AssignStmt(Id(n), BinExpr(+, Id(n), FuncCall(add, [Id(delta)]))), CallStmt(readInteger, ), CallStmt(printInteger, BinExpr(-, IntegerLit(123), IntegerLit(12))), CallStmt(readFloat, ), CallStmt(writeFloat, BinExpr(*, FloatLit(10000000000.0), FloatLit(1.2))), CallStmt(readBoolean, ), CallStmt(printBoolean, UnExpr(<class 'str'>, Id(n))), CallStmt(readString, ), CallStmt(printString, BinExpr(::, StringLit(hello), StringLit(world!))), CallStmt(super, Id(a), Id(b), Id(c)), CallStmt(preventDefault, )])), ReturnStmt(Id(n))]))
])